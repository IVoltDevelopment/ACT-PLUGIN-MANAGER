

using System;
using System.Collections.Generic;
using System.Globalization;
using ACT.Core.PluginManager.LocalPlugins;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace ACT.Core.PluginManager.JSON_Objects
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	An application plugins. </summary>
	///
	/// <remarks>	Mark Alicz, 1/23/2024. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public partial class Application_Plugins
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets or sets the about. </summary>
		///
		/// <value>	The about. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("about", NullValueHandling = NullValueHandling.Ignore)]
		public string About { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets or sets the name of the application. </summary>
		///
		/// <value>	The name of the application. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("app_name", NullValueHandling = NullValueHandling.Ignore)]
		public string AppName { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets or sets the interface plugin dlls. </summary>
		///
		/// <value>	The interface plugin dlls. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("interface_plugin_dlls", NullValueHandling = NullValueHandling.Ignore)]
		public List<Interface_Plugin_Dll> InterfacePluginDlls { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Creates a new object from the given JSON. </summary>
		///
		/// <remarks>	Mark Alicz, 1/18/2024. </remarks>
		///
		/// <param name="json">	The JSON. </param>
		///
		/// <returns>	The Application_Plugins. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		public static Application_Plugins FromJson(string json) => JsonConvert.DeserializeObject<Application_Plugins>(json, JSON_Converter.Settings);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Converts this object to a JSON. </summary>
		///
		/// <remarks>	Mark Alicz, 1/18/2024. </remarks>
		///
		/// <returns>	This object as a string. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		public string ToJson() => JsonConvert.SerializeObject(this, JSON_Converter.Settings);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	An interface plugin dll. </summary>
	///
	/// <remarks>	Mark Alicz, 1/23/2024. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public class Interface_Plugin_Dll
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets or sets a value indicating whether the valid plugin. </summary>
		///
		/// <value>	True if valid plugin, false if not. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonIgnore()]
		public bool ValidPlugin { get; internal set; } = false;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets or sets the interface. </summary>
		///
		/// <value>	The interface. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("interface", NullValueHandling = NullValueHandling.Ignore)]
		public string Interface { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////			
		/// <summary>	Gets or sets the name of the DLL. </summary>
		///
		/// <value>	The name of the DLL. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("dll_name", NullValueHandling = NullValueHandling.Ignore)]
		public string DllName { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////			
		/// <summary>	Gets or sets the version increment. </summary>
		///
		/// <value>	The version increment. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("version_increment", NullValueHandling = NullValueHandling.Ignore)]
		public long? VersionIncrement { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////			
		/// <summary>	Gets or sets the name of the plugin. </summary>
		///
		/// <value>	The name of the plugin. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("plugin_name", NullValueHandling = NullValueHandling.Ignore)]
		public string PluginName { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////			
		/// <summary>	Gets or sets the full pathname of the specific file. </summary>
		///
		/// <value>	The full pathname of the specific file. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("specific_path", NullValueHandling = NullValueHandling.Ignore)]
		public string SpecificPath { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////			
		/// <summary>	Gets or sets the priority. </summary>
		///
		/// <value>	The priority. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
		public long? Priority { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////			
		/// <summary>	Gets or sets the continue execution chain. </summary>
		///
		/// <value>	The continue execution chain. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("continue_execution_chain", NullValueHandling = NullValueHandling.Ignore)]
		public bool? ContinueExecutionChain { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////			
		/// <summary>	Gets or sets the replace core code. </summary>
		///
		/// <value>	The replace core code. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("replace_core_code", NullValueHandling = NullValueHandling.Ignore)]
		public bool? ReplaceCoreCode { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////			
		/// <summary>	Gets or sets the arguments. </summary>
		///
		/// <value>	The arguments. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("arguments", NullValueHandling = NullValueHandling.Ignore)]
		public List<string> Arguments { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////			
		/// <summary>	Gets or sets the depends on. </summary>
		///
		/// <value>	The depends on. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("depends_on", NullValueHandling = NullValueHandling.Ignore)]
		public List<Depends_On> DependsOn { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////			
		/// <summary>	Gets or sets the enabled value. </summary>
		///
		/// <value>	The enavled value. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("enabled", NullValueHandling = NullValueHandling.Ignore)]
		public bool Enabled { get; set; }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////		
	/// <summary>	The depends on. </summary>
	///
	/// <remarks>	Mark Alicz, 1/23/2024. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////		
	public class Depends_On
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////			
		///<summary>	Gets or sets the interface. </summary>
		///
		/// <value>	The interface. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("interface", NullValueHandling = NullValueHandling.Ignore)]
		public string Interface { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////			
		/// <summary>	Gets or sets the name of the DLL. </summary>
		///
		/// <value>	The name of the DLL. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("dll_name", NullValueHandling = NullValueHandling.Ignore)]
		public string DllName { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////			
		/// <summary>	Gets or sets the version increment minimum. </summary>
		///
		/// <value>	The version increment minimum. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		[JsonProperty("version_increment_min", NullValueHandling = NullValueHandling.Ignore)]
		public long? VersionIncrementMin { get; set; }
	}


}
